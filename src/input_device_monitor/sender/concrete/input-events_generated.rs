// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod coffee_time {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod input_events {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum KeyboardEventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct KeyboardEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for KeyboardEvent<'a> {
  type Inner = KeyboardEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> KeyboardEvent<'a> {
  pub const VT_STATE: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    KeyboardEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args KeyboardEventArgs<'args>
  ) -> flatbuffers::WIPOffset<KeyboardEvent<'bldr>> {
    let mut builder = KeyboardEventBuilder::new(_fbb);
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.state { builder.add_state(x); }
    builder.finish()
  }


  #[inline]
  pub fn state(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(KeyboardEvent::VT_STATE, None)}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(KeyboardEvent::VT_NAME, None)}
  }
}

impl flatbuffers::Verifiable for KeyboardEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("state", Self::VT_STATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .finish();
    Ok(())
  }
}
pub struct KeyboardEventArgs<'a> {
    pub state: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for KeyboardEventArgs<'a> {
  #[inline]
  fn default() -> Self {
    KeyboardEventArgs {
      state: None,
      name: None,
    }
  }
}

pub struct KeyboardEventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> KeyboardEventBuilder<'a, 'b> {
  #[inline]
  pub fn add_state(&mut self, state: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KeyboardEvent::VT_STATE, state);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KeyboardEvent::VT_NAME, name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> KeyboardEventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    KeyboardEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<KeyboardEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for KeyboardEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("KeyboardEvent");
      ds.field("state", &self.state());
      ds.field("name", &self.name());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `KeyboardEvent`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_keyboard_event_unchecked`.
pub fn root_as_keyboard_event(buf: &[u8]) -> Result<KeyboardEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<KeyboardEvent>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `KeyboardEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_keyboard_event_unchecked`.
pub fn size_prefixed_root_as_keyboard_event(buf: &[u8]) -> Result<KeyboardEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<KeyboardEvent>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `KeyboardEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_keyboard_event_unchecked`.
pub fn root_as_keyboard_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<KeyboardEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<KeyboardEvent<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `KeyboardEvent` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_keyboard_event_unchecked`.
pub fn size_prefixed_root_as_keyboard_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<KeyboardEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<KeyboardEvent<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a KeyboardEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `KeyboardEvent`.
pub unsafe fn root_as_keyboard_event_unchecked(buf: &[u8]) -> KeyboardEvent {
  flatbuffers::root_unchecked::<KeyboardEvent>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed KeyboardEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `KeyboardEvent`.
pub unsafe fn size_prefixed_root_as_keyboard_event_unchecked(buf: &[u8]) -> KeyboardEvent {
  flatbuffers::size_prefixed_root_unchecked::<KeyboardEvent>(buf)
}
#[inline]
pub fn finish_keyboard_event_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<KeyboardEvent<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_keyboard_event_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<KeyboardEvent<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod InputEvents
}  // pub mod CoffeeTime

